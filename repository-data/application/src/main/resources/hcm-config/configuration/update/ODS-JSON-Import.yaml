---
definitions:
  config:
    /hippo:configuration/hippo:update/hippo:registry/ODS-JSON-Import:
      hipposys:batchsize: 10
      hipposys:description: ''
      hipposys:dryrun: true
      hipposys:loglevel: DEBUG
      hipposys:parameters: ''
      hipposys:query: /jcr:root/content/documents/corporate-website/news/odsjson//*[(@jcr:primaryType='hippo:resource')]
      hipposys:script: "import org.apache.commons.vfs2.FileObject\r\nimport org.hippoecm.frontend.editor.plugins.resource.ResourceHelper\r\
        \nimport org.hippoecm.repository.api.WorkflowManager\r\nimport org.hippoecm.repository.impl.PropertyDecorator\r\
        \nimport org.hippoecm.repository.util.JcrUtils\r\nimport org.hippoecm.repository.util.NodeIterable\r\
        \nimport org.onehippo.forge.content.exim.core.DocumentManager\r\nimport org.onehippo.forge.content.exim.core.impl.WorkflowDocumentVariantImportTask\r\
        \nimport org.onehippo.repository.update.BaseNodeUpdateVisitor\r\nimport org.onehippo.repository.util.JcrConstants\r\
        \n\r\nimport javax.jcr.*\r\nimport javax.jcr.query.Query\r\nimport javax.jcr.query.QueryManager\r\
        \nimport javax.jcr.query.QueryResult\r\nimport java.text.SimpleDateFormat\r\
        \n\r\n/**\r\n * This script consumes content generated by\r\n * <a href=\"\
        https://github.com/NHS-digital-website/indicators-hippo-migrator\">Indicators\
        \ Migrator</a>.\r\n *\r\n */\r\nclass ODSImporterScript extends BaseNodeUpdateVisitor\
        \ {\r\n    private static final String PROPERTY_LAST_MODIFIED = \"jcr:lastModified\"\
        ;\r\n    private Session session\r\n    private QueryManager manager\r\n \
        \   private boolean createFile = true;\r\n    private boolean doneFile = false;\r\
        \n\r\n    void initialize(Session session) {\r\n        this.session = session\r\
        \n        manager = session.getWorkspace().getQueryManager();\r\n    }\r\n\
        \r\n    private void loadFile(byte[] strbytes) {\r\n        if (createFile)\
        \ {\r\n            log.debug(\"Saving File\")\r\n            InputStream stream\
        \ = new ByteArrayInputStream(strbytes)\r\n            def result = manager.createQuery(\"\
        /jcr:root/content/assets\", Query.XPATH).execute()\r\n            Node node\
        \ = result.getNodes().nextNode();\r\n            JcrUtils.ensureIsCheckedOut(node)\r\
        \n            SimpleDateFormat format1 = new SimpleDateFormat(\"yyyy-MM-dd_HH_mm_ss\"\
        );\r\n            Node folder = node.addNode(\"ODS_Data_\" + format1.format(Calendar.getInstance().getTime())\
        \ + \".json\", \"externalstorage:resource\")\r\n            folder.setProperty(JcrConstants.JCR_DATA,\
        \ ResourceHelper.getValueFactory(node).createBinary(stream));\r\n        \
        \    folder.setProperty(PROPERTY_LAST_MODIFIED, Calendar.getInstance())\r\n\
        \            folder.setProperty(\"jcr:mimeType\", \"text/json\")\r\n     \
        \       folder.getSession().save()\r\n        }\r\n    }\r\n\r\n    @Override\r\
        \n    boolean doUpdate(Node node) throws RepositoryException {\r\n       \
        \ log.debug(\"Saving File \" + node.getPath())\r\n        PropertyIterator\
        \ iter1 = node.getProperties()\r\n        while (iter1.hasNext() && !doneFile)\
        \ {\r\n            PropertyDecorator pd = iter1.nextProperty();\r\n      \
        \      if (\"jcr:data\".equalsIgnoreCase(pd.getName())) {\r\n            \
        \    log.debug(\"Updating pattern for node \" + pd.getName())\r\n        \
        \        byte[] str = pd.getValue().getString().getBytes()\r\n           \
        \     loadFile(str)\r\n                doneFile = true;\r\n            }\r\
        \n        }\r\n        return false\r\n    }\r\n\r\n    boolean undoUpdate(Node\
        \ node) {\r\n        throw new UnsupportedOperationException('Updater does\
        \ not implement undoUpdate method')\r\n    }\r\n\r\n}"
      hipposys:throttle: 1000
      jcr:primaryType: hipposys:updaterinfo
