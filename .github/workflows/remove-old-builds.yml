# This is a basic workflow to help you get started with Actions

name: Clear Builds

on:
  push:
    branches:
      - master

jobs:
  job1:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix

        run: |
          distributionList={\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}
          echo "::set-output name=matrix::${distributionList}"
          echo ${distributionList}

  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.job1.outputs.matrix)}}
    steps:
      - run: echo ${{ matrix.project }}
      - run: echo ${{ matrix.config }}

  build:
    name: Clear Builds
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.remove-distribution.outputs.distributionList}}
    timeout-minutes: 90

    steps:
      # Get API access token and verify it.
      - name: Obtaino JWT Token
        id: jwt_token
        run: |
          response=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -X POST https://api.${{ secrets.HOST }}/v3/authn/access_token \
          -d '{ "username": "${{ env.USERNAME }}", "password": "${{ env.PASSWORD }}" }')
          token=$(echo $response | awk 'match($0, /access_token":"[^"]+"/) {print substr($0, RSTART+15)}' | cut -d '"' -f 1 )
          refresh=$(echo $response | awk 'match($0, /refresh_token":"[^"]+"/) {print substr($0, RSTART+16)}' | cut -d '"' -f 1 )
          echo "::set-output name=token::$token"
          echo "::set-output name=refresh::$refresh"
        env:
          USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}

      - name: Verify JWT Token
        id: jwt_token_verify
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/authn/verify_token \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"

      - name: Check Response Code from Verify JWT Token
        if: ${{ steps.jwt_token_verify.outputs.code != 200 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The JWT token failed verification!')
        env:
          # 'CODE' is for debugging fails
          CODE: ${{ steps.jwt_token_verify.outputs.code }}

      #
      # Prepare App Config Deployment Details
      #
      - name: Get Distribution List
        id: distribution-list
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/distributions)
          echo "::set-output name=matrix::${response}"

      - name: Get Latest Distribution Id Of Environment
        id: latest-distribution-id
        run: |
          latestId=$(echo '${{steps.distribution-list.outputs.matrix}}' | sed -e 's/+00:00/Z/g' | jq '  [.items[] | {id: .id , date: .createdAt}] | sort_by(.date) | map(.id) | reverse | .[0]')
          echo "::set-output name=latestId::${latestId}"

      - name: Remove old Distribution from Environment
        id: remove-distribution
        run: |
          distributionList=$(echo '${{steps.distribution-list.outputs.matrix}}' | sed -e 's/+00:00/Z/g' | jq '[.items[] | {id: .id , date: .createdAt}]')
          JSON={\"include\":${distributionList}}

          echo "::set-output name=distributionList::${JSON}"
          echo "***********************"
          echo ${JSON}
          echo "***********************"

      - name: Print JSON
        id: print-json
        run: |
          echo "***********************"
          echo ${steps.remove-distribution.outputs.distributionList}
          echo "***********************"


  remove-builds:
    name: Remove Builds
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix: ${{fromJson(needs.build.outputs.matrix)}}
    steps:
      - run: echo ${{matrix.id}}
      - run: echo ${{matrix.date}}