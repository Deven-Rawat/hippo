# This is a basic workflow to help you get started with Actions

name: Clear Builds

on:
  push:
    branches:
      - master

env:
  NO_OF_DISTRIBUTION_TO_KEEP_PROD: 40
  NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD: 70
  PROD_REG_EXPRESSION: "website-v[a-zA-Z0-9_.]*-[distribution.tar.gz]"
  NON_PROD_REG_EXPRESSION: "website-v[a-zA-Z0-9_.]*-[a-z0-9]+-[distribution.tar.gz]"

jobs:

  retrieve-all-distribution-ids:
    name: Retrieve All distribution Ids
    runs-on: ubuntu-latest
    outputs:
      allDistributionIds: ${{ steps.all-distribution-list.outputs.allDistIds }}
    timeout-minutes: 90

    steps:
      # Get API access token and verify it.
      - name: Obtaino JWT Token
        id: jwt_token
        run: |
          response=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -X POST https://api.${{ secrets.HOST }}/v3/authn/access_token \
          -d '{ "username": "${{ env.USERNAME }}", "password": "${{ env.PASSWORD }}" }')
          token=$(echo $response | awk 'match($0, /access_token":"[^"]+"/) {print substr($0, RSTART+15)}' | cut -d '"' -f 1 )
          refresh=$(echo $response | awk 'match($0, /refresh_token":"[^"]+"/) {print substr($0, RSTART+16)}' | cut -d '"' -f 1 )
          echo "::set-output name=token::$token"
          echo "::set-output name=refresh::$refresh"

        env:
          USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}

      - name: Verify JWT Token
        id: jwt_token_verify
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/authn/verify_token \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"

      - name: Check Response Code from Verify JWT Token
        if: ${{ steps.jwt_token_verify.outputs.code != 200 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The JWT token failed verification!')
        env:
          # 'CODE' is for debugging fails
          CODE: ${{ steps.jwt_token_verify.outputs.code }}

      - name: Get ALL Prod Dist List
        id: all-distribution-list
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/distributions)
          echo "::set-output name=allDistIds::Hello World"
          echo "Here "  ${{steps.all-distribution-list.response}}

      - name: Distribution Ids Retrival failed
        if: ${{ contains(steps.all-distribution-list.response ,'401') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Retrival of distibution ids failed ')

  process-non-prod-dist-list:
    name: Process Non Prod Distribution List
    runs-on: ubuntu-latest
    needs: retrieve-all-distribution-ids

    outputs:
      allNonProdDistIds: ${{steps.all-non-prod-distribution-ids.outputs.allNonProdDistIds}}
      latestNonProdDistIds: ${{steps.latest-non-prod-distribution-ids.outputs.latestNonProdDistIds}}
    timeout-minutes: 90
    steps:
      - name: Get Latest NON-Prod Distribution Ids
        id: latest-non-prod-distribution-ids
        run: |
          latestId=$(echo '${{needs.retrieve-all-distribution-ids.outputs.allDistributionIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date) | map(select(.name | test("${{env.NON_PROD_REG_EXPRESSION}}"))) | map(.id) | .[:${{env.NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD}}]')
          echo "::set-output name=latestNonProdDistIds::${latestId}"

      - name: All non prod Distribution Ids
        id: all-non-prod-distribution-ids
        run: |
          distIds=$(echo '${{needs.retrieve-all-distribution-ids.outputs.allDistributionIds}}' | jq --compact-output '[.items[] | {id: .id , date: .createdAt} ]')
          JSON={\"include\":${distributionListL}}
          echo "::set-output name=allNonProdDistIds::{\"include\":${distIds}}"

      - name: Print JSON
        id: print-json
        run: |
          echo "***********************"
          echo ${{steps.all-non-prod-distribution-ids.outputs.allNonProdDistIds}}
          echo "***********************"
          echo ${{steps.latest-non-prod-distribution-ids.outputs.latestNonProdDistIds}}
          echo "***********************"

  remove-non-prod-builds:
    name: Remove Non Prod Builds
    runs-on: ubuntu-latest
    needs: process-non-prod-dist-list
    strategy:
      matrix: ${{fromJson(needs.process-non-prod-dist-list.outputs.allNonProdDistIds)}}
      fail-fast: false
    steps:
     - name: Build is recent
       id: keep_build
       if: ${{ contains(needs.process-non-prod-dist-list.outputs.latestNonProdDistIds, matrix.id) }}
       run: |
         echo " Keep the build "
         echo "::set-output name=code::100"
     - name: Check if Build to be deleted
       id: remove_build
       if: ${{ ! contains(needs.process-non-prod-dist-list.outputs.latestNonProdDistIds, matrix.id) }}
       run: |
         code=$(curl \
         -H "Authorization: Bearer ${{ needs.retrieve-token.outputs.tokens }}" \
         -X DELETE https://api.${{ secrets.HOST }}/v3/distributions/${{matrix.id}} \
         -o /dev/null -w '%{http_code}\n' -s)
         echo ${code}
         echo "::set-output name=code::$code"
     - name: Authentication failed
       if: ${{ steps.remove_build.outputs.code == 401 }}
       uses: actions/github-script@v3
       with:
         script: |
           core.setFailed(' 401 Authentication error' )
     - name: Removal of Build failed
       if: ${{ steps.keep_build.outputs.code != 100 && steps.remove_build.outputs.code != 200 }}
       uses: actions/github-script@v3
       with:
         script: |
           core.setFailed('Removal failed ')
