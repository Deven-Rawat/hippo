name: Deploy to Production

# Schedule deployment to Production
on:
  workflow_call:
    inputs:
      prdFileName:
        required: true
        type: string
    secrets:
      HOST:
        required: true

env:
  PROD_FILE_NAME: ${{ inputs.prdFileName }}
  #To be replaced by Prod Env Id
  PROD_ENV_ID: "083ff91e-6ac5-4638-945c-3ee18acc40bf"
  TARGET: "prod"

jobs:

  prepare-prod-deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 85
    steps:

      # Get API access token and verify it.
      - name: Obtaino JWT Token
        id: jwt_token
        run: |
          response=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -X POST https://api.${{ secrets.HOST }}/v3/authn/access_token \
          -d '{ "username": "${{ env.USERNAME }}", "password": "${{ env.PASSWORD }}" }')
          token=$(echo $response | awk 'match($0, /access_token":"[^"]+"/) {print substr($0, RSTART+15)}' | cut -d '"' -f 1 )
          refresh=$(echo $response | awk 'match($0, /refresh_token":"[^"]+"/) {print substr($0, RSTART+16)}' | cut -d '"' -f 1 )
          echo "::set-output name=token::$token"
          echo "::set-output name=refresh::$refresh"
        env:
          USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
      - name: Verify JWT Token
        id: jwt_token_verify
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/authn/verify_token \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"
      - name: Check Response Code from Verify JWT Token
        if: ${{ steps.jwt_token_verify.outputs.code != 200 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The JWT token failed verification!')

      #
      # Prepare App Config Deployment Details
      #
      - name: Get Configuration Files Details
        id: files
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/appconfigfiles)
          echo "::set-output name=details::${response}"

      - name: Get Lastest System Properties for Envrinment
        id: system-properties
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-system-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "::set-output name=id::${id}"


      - name: Get Lastest AWS Keys for Envrinment
        id: aws-keys
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-aws-credentials-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "::set-output name=id::${id}"

      - name: Get Lastest IP Configuration File ID
        id: latest-ip-whitelist
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "hippo-ipfilter-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "::set-output name=id::${id}"

      - name: Get All Distribution Ids
        id: all-distribution-id
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/distributions)
          echo "::set-output name=allDistIds::${response}"
          respLengthTemp=${#response}
          echo "::set-output name=respLength::${respLengthTemp}"
          echo ${respLengthTemp}

      - name: Distribution Ids Retrival failed
        if: ${{steps.all-distribution-id.outputs.respLength < 4}}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Retrival of distibution ids failed ')

      - name: Get Distribution Ids for prod deployment
        id: prod-distribution-ids
        run: |
          latestId=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | map(select(.name | test("${{env.PROD_FILE_NAME}}"))) | map(.id)')
          prodLatestDistId=$(echo ${latestId} | tr "[" " " | tr "]" " " | xargs)
          echo "::set-output name=prodDistId::${prodLatestDistId}"
          echo  ${{steps.all-distribution-id.outputs.respLength}}

      - name: Request Deployment from BR Cloud
        id: deployment
        run: |
          code=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X PUT https://api.${{ secrets.HOST }}/v3/environments/${{ env.ENVIRONMENT }}/deploy \
          -d '{ "distributionId": "${{ env.DISTRIBUTION }}", "strategy" : "rollingupdate", "appConfigFileRoles": [ { "appConfigFileId": ${{ steps.aws-keys.outputs.id }}, "role": "file", "newFilename": "aws-credentials.properties" }, { "appConfigFileId": ${{ steps.system-properties.outputs.id }}, "role": "systemproperty" }, { "appConfigFileId": ${{ steps.latest-ip-whitelist.outputs.id }}, "role": "file", "newFilename": "hippo-ipfilter.properties" } ] }' \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"
        env:
          DISTRIBUTION: ${{ steps.prod-distribution-ids.outputs.prodDistId }}
          ENVIRONMENT: ${{ env.PROD_ENV_ID }}

      - name: Check Response Code from Request Deployment
        uses: actions/github-script@v3
        if: ${{ steps.deployment.outputs.code != 202 }}
        with:
          script: core.setFailed('Response code mismatch while requesting deployment from BR Cloud! Response ${{ env.CODE }}')
        env:
          CODE: ${{ steps.deployment.outputs.code }}
