name: Deploy to Production - Deven


on:
  push:
    branches:
      - master

env:
  #Prod Env Id
  PROD_ENV_ID: "91d6f394-c2ed-40aa-bc8d-3b29e2aaa645"
  TARGET: "production"
jobs:

  prepare-prod-deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 85
    if: ${{ !failure() }}
    steps:
      #
      # Step 1
      #
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need all the tags for versioning
          ref: master

      - name: Obtain file name for deployment
        id: filename
        run: |
          fileVersion=$(git describe --tags --match v3.0* rc)
          fileName=$(git describe --tags --match v3.0* rc).tar.gz

          echo "fileName=${fileName}" >> $GITHUB_OUTPUT
          echo "fileVersion=${fileVersion}" >> $GITHUB_OUTPUT


      # Get API access token and verify it.
      - name: Obtaino JWT Token
        id: jwt_token
        run: |
          response=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -X POST https://api.${{ secrets.HOST }}/v3/authn/access_token \
          -d '{ "username": "${{ env.USERNAME }}", "password": "${{ env.PASSWORD }}" }')
          token=$(echo $response | awk 'match($0, /access_token":"[^"]+"/) {print substr($0, RSTART+15)}' | cut -d '"' -f 1 )
          refresh=$(echo $response | awk 'match($0, /refresh_token":"[^"]+"/) {print substr($0, RSTART+16)}' | cut -d '"' -f 1 )
          echo "token=$token" >> $GITHUB_OUTPUT
          echo "refresh=$refresh" >> $GITHUB_OUTPUT
        env:
          USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
      - name: Verify JWT Token
        id: jwt_token_verify
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/authn/verify_token \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "code=$code" >> $GITHUB_OUTPUT
      - name: Check Response Code from Verify JWT Token
        if: ${{ steps.jwt_token_verify.outputs.code != 200 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('The JWT token failed verification!')

      #
      # Prepare App Config Deployment Details
      #
      - name: Get Configuration Files Details
        id: files
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/appconfigfiles)
           echo "details=${response}" >> $GITHUB_OUTPUT

      - name: Get Lastest System Properties for Envrinment
        id: system-properties
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-system-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT


      - name: Get Lastest AWS Keys for Envrinment
        id: aws-keys
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-aws-credentials-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Get Lastest IP Configuration File ID
        id: latest-ip-whitelist
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "hippo-ipfilter-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Get All Distribution Ids
        id: all-distribution-id
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/distributions)
          echo "allDistIds=${response}" >> $GITHUB_OUTPUT
          respLengthTemp=${#response}
          echo "respLength=${respLengthTemp}" >> $GITHUB_OUTPUT
          echo ${respLengthTemp}

      - name: Distribution Ids Retrival failed
        if: ${{steps.all-distribution-id.outputs.respLength < 4}}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Retrival of distibution ids failed ')

      - name: Get Distribution Ids for prod deployment
        id: prod-distribution-ids
        run: |
          latestId=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | map(select(.name | test("${{ steps.filename.outputs.fileName }}"))) | map(.id)')
          prodLatestDistId=$(echo ${latestId} | tr "[" " " | tr "]" " " | xargs)
          echo "prodDistId=${prodLatestDistId}" >> $GITHUB_OUTPUT
          echo  ${{steps.all-distribution-id.outputs.respLength}}

      - name: Get latest Email SMTP properties File
        id: brc-mail-smtp
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "brc-mail-smtp-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Request Deployment from BR Cloud
        id: deployment
        run: |
          code=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X PUT https://api.${{ secrets.HOST }}/v3/environments/${{ env.ENVIRONMENT }}/deploy \
          -d '{ "distributionId": "${{ env.DISTRIBUTION }}", "strategy" : "rollingupdate", "appConfigFileRoles": [ { "appConfigFileId": ${{ steps.aws-keys.outputs.id }}, "role": "file", "newFilename": "aws-credentials.properties" }, { "appConfigFileId": ${{ steps.system-properties.outputs.id }}, "role": "systemproperty" }, { "appConfigFileId": ${{ steps.latest-ip-whitelist.outputs.id }}, "role": "file", "newFilename": "hippo-ipfilter.properties" }, { "appConfigFileId": ${{ steps.brc-mail-smtp.outputs.id }}, "role": "file", "newFilename": "brc-mail-smtp.properties" } ] }' \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "code=$code" >> $GITHUB_OUTPUT
        env:
          DISTRIBUTION: ${{ steps.prod-distribution-ids.outputs.prodDistId }}
          ENVIRONMENT: ${{ env.PROD_ENV_ID }}

      - name: Check Response Code from Request Deployment
        uses: actions/github-script@v6
        if: ${{ steps.deployment.outputs.code != 202 }}
        with:
          script: core.setFailed('Response code mismatch while requesting deployment from BR Cloud! Response ${{ env.CODE }}')
        env:
          CODE: ${{ steps.deployment.outputs.code }}

  post-deployment:
    needs: prepare-prod-deployment
    if: ${{ !failure() }}
    timeout-minutes: 60
    name: Updating Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need all the tags for versioning
          ref: master

      - name: Tagging the build
        run: |
          make git.update-environment-tag ENV=prd VERSION=rc
      #
      # Provide a URL to the active GitHub Actions Workflow run
      #
      - name: Slack message (Track progress message)
        if: ${{ success() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline Finished", "attachments": [{ "text" : "The pipeline finished",  "color": "#7CFC00" }] }'
        env:
          SLACK_WEBHOOK: ${{  secrets.SLACK_WEBHOOK }}
          GITHUB_WORKFLOW_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          CHANNEL_ID: ${{ github.event.client_payload.data.channel_id }}
