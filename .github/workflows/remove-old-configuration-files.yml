# This is a basic workflow to help you get started with Actions

name: Remove Old Configuration Files

on:
  push:
    branches:
      - master

env:
  NO_OF_DISTRIBUTION_TO_KEEP_PROD: 40
  NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD: 10
  PROD_REG_EXPRESSION: "v\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{3,}\\\\.tar"
  NON_PROD_REG_EXPRESSION: "v\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{3,}\\\\-\\\\d{1,2}-[a-z0-9]+\\\\.tar"

jobs:
  remove-old-configuration:
    name: Remove Old Configuration Files
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # Get API access token and verify it.
      - name: Obtaino JWT Token
        id: jwt_token
        run: |
          response=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -X POST https://api.${{ secrets.HOST }}/v3/authn/access_token \
          -d '{ "username": "${{ env.USERNAME }}", "password": "${{ env.PASSWORD }}" }')
          token1=$(echo $response | awk 'match($0, /access_token":"[^"]+"/) {print substr($0, RSTART+15)}' | cut -d '"' -f 1 )
          refresh=$(echo $response | awk 'match($0, /refresh_token":"[^"]+"/) {print substr($0, RSTART+16)}' | cut -d '"' -f 1 )
          echo "::set-output name=token1::$token1"
          echo "::set-output name=refresh::$refresh"

        env:
          USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}

      - name: Verify JWT Token
        id: jwt_token_verify
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token1 }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/authn/verify_token \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"

      - name: Check Response Code from Verify JWT Token
        if: ${{ steps.jwt_token_verify.outputs.code != 200 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The JWT token failed verification!')
        env:
          # 'CODE' is for debugging fails
          CODE: ${{ steps.jwt_token_verify.outputs.code }}

      - name: Get All Configuration Files
        id: all-config-file-ids
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token1 }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/appconfigfiles)
          echo "::set-output name=allConfigFiles::${response}"
          echo "Files are " ${response}

      - name: Get All Environment
        id: all-envs
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token1 }}" \
          -X GET https://api.${{ secrets.HOST }}/v3/environments)
          availEnvs=$(echo ${response} | jq --compact-output '[.items[] | {name: .name}] | map(select(.name )) | map(.name)')
          echo "::set-output name=allEnvs::${availEnvs}"
          echo "Avialable Envs are " ${availEnvs}

      - name: Remove Old Config Files
        run: |
          declare -a  envList=$(echo  '${{steps.all-envs.outputs.allEnvs}}' | tr "[" "(" | tr "]" ")" | tr "," " ")
          for value in "${envList[@]}"
          do
            temp=${value}
            envSysProperties=$(echo '${{steps.all-config-file-ids.outputs.allConfigFiles}}' |  jq '[.[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date) | reverse| map(select(.name | test("$value-system"))) | map(.name)' )
            echo ----Thidds on1e --  ${envSysProperties}
          done

      - name: Config File Ids Retrival failed
        if: ${{ contains(steps.all-config-file-ids.response ,'401') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Retrival of config file ids failed ')

      - name: Get Latest NON-Prod Distribution Ids
        id: latest-non-prod-distribution-ids
        run: |
          latestId=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date) | map(select(.name | test("${{env.NON_PROD_REG_EXPRESSION}}"))) | map(.id) | .[:${{env.NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD}}]')
          echo "::set-output name=latestNonProdDistIds::${latestId}"

      - name: Get Latest Prod Distribution Ids
        id: latest-prod-distribution-ids
        run: |
          latestId=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date) | map(select(.name | test("${{env.PROD_REG_EXPRESSION}}"))) | map(.id) | .[:${{env.NO_OF_DISTRIBUTION_TO_KEEP_PROD}}]')
          echo "::set-output name=latestProdDistIds::${latestId}"

      - name: All Non Prod Distribution Ids
        id: all-non-prod-active-distribution-ids
        run: |
          distIds=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | jq --compact-output '[.items[] | {id: .id, name: .name} ] | map(select(.name | test("${{env.NON_PROD_REG_EXPRESSION}}"))) | map(.id)')
          echo "::set-output name=allNonProdDistributionIdMap::${distIds}"

      - name: All  Prod Distribution Ids
        id: all-prod-active-distribution-ids
        run: |
          distIds=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | jq --compact-output '[.items[] | {id: .id, name: .name} ] | map(select(.name | test("${{env.PROD_REG_EXPRESSION}}"))) | map(.id)')
          echo "::set-output name=allProdDistributionIdMap::${distIds}"

      - name: Print Ids
        id: print-ids
        run: |
          echo "***********************"
          echo " All non Prod Ids "+ ${{steps.all-non-prod-active-distribution-ids.outputs.allNonProdDistributionIdMap}}
          echo "***********************"
           echo " All  Prod Ids "+ ${{steps.all-prod-active-distribution-ids.outputs.allProdDistributionIdMap}}
          echo "***********************"
          echo " All latest Non Prod Ids "+ ${{steps.latest-non-prod-distribution-ids.outputs.latestNonProdDistIds}}
          echo "***********************"
          echo " All Latest Prod Ids "+ ${{steps.latest-prod-distribution-ids.outputs.latestProdDistIds}}
          echo "***********************"


      - name: Remove Old Non Prod Distribution
        run: |
          declare -a  allDistributionIds=$(echo  '${{steps.all-non-prod-active-distribution-ids.outputs.allNonProdDistributionIdMap}}' | tr "[" "(" | tr "]" ")" | tr "," " ")
          declare -a  nonProdLatestDistIds=$(echo  '${{steps.latest-non-prod-distribution-ids.outputs.latestNonProdDistIds}}' | tr "[" "(" | tr "]" ")" | tr "," " ")

          echo "allDistributionIds  Length --> "  ${#allDistributionIds[@]}
          echo "nonProdLatestDistIds  Length --> "  ${#nonProdLatestDistIds[@]}

          for value in "${allDistributionIds[@]}"
          do
            if [[ ! " ${nonProdLatestDistIds[*]} " =~ " ${value} " ]]; then
              code=$(curl \
                -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token1 }}" \
                -X DELETE https://api.${{ secrets.HOST }}/v3/distributions/$value \
                -o /dev/null -w '%{http_code}\n' -s)

                if [ "$code" = "409" ]; then
                   echo "Distribution id is in use "  ${value}
                fi
            fi
          done

      - name: Remove Old Prod Distribution
        run: |
          declare -a  allDistributionIds=$(echo  '${{steps.all-prod-active-distribution-ids.outputs.allProdDistributionIdMap}}' | tr "[" "(" | tr "]" ")" | tr "," " ")
          declare -a  prodLatestDistIds=$(echo  '${{steps.latest-prod-distribution-ids.outputs.latestProdDistIds}}' | tr "[" "(" | tr "]" ")" | tr "," " ")

          echo "allDistributionIds  Length --> "  ${#allDistributionIds[@]}
          echo "prodLatestDistIds  Length --> "  ${#prodLatestDistIds[@]}

          for value in "${allDistributionIds[@]}"
          do
            if [[ ! " ${prodLatestDistIds[*]} " =~ " ${value} " ]]; then
              code=$(curl \
                -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token1 }}" \
                -X DELETE https://api.${{ secrets.HOST }}/v3/distributions/$value \
                -o /dev/null -w '%{http_code}\n' -s)

                if [ "$code" = "409" ]; then
                   echo "Distribution id is in use "  ${value}
                fi
            fi
          done