name: Deploy to UAT and Git Tag (v2)

on:
  push:
    branches:
      - geoff-test

jobs:
  build:
    name: Build Master
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:

      #
      # Step 1
      #
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Need all the tags for versioning

      #
      # Step 2
      #
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8

      #
      # Step 3
      # Get the Caches
      #
      - name: Get cache key helper values
        uses: actions/github-script@v4.0.2
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })
      - name: Setup cache (Maven packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-nhs-digital-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-maven-nhs-digital-${{ env.YEAR }}-
            ${{ runner.os }}-maven-nhs-digital-
            ${{ runner.os }}-maven-nhs-
      - name: Setup cache (Node.js packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-nhs-digital-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-node-nhs-digital-${{ env.YEAR }}-
            ${{ runner.os }}-node-nhs-digital-
            ${{ runner.os }}-node-nhs-
      #
      # Step 4
      #
      - name: Bump the version number
        run: make version.bumpup


      #
      # Step 5
      #
      - name: Build master
        run: make clean build
        env:
          HIPPO_MAVEN_PASSWORD: ${{ secrets.HIPPO_MAVEN_PASSWORD }}
          HIPPO_MAVEN_USERNAME: ${{ secrets.HIPPO_MAVEN_USERNAME }}

      #
      # Step 6
      #
      - name: Set the commit's Git status
        run: make github.status.success

      #
      # Step 6
      #
      - name: Push tag back to github
        run: |
          make git.update-environment-tag
          git push --tags
      #
      # upload build for next job
      #
      - name: Store Artifact for Later in the Pipeline
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: target/*.tar.gz
          if-no-files-found: error


  ODv1Deployment:
    name: Deploy to ODv1
    needs: build
    runs-on: ubuntu-latest
    env:
      ENV: "uat"
    steps:

      #
      # Prepare for RD communication
      #
      - name: Configure SSH certificates
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.IDM_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.IDM_PUB }}" > ~/.ssh/id_rsa.pub
          chmod 400 ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa.pub
      - name: Configure known hosts
        run: |
          touch ~/.ssh/known_hosts
          ssh-keygen -R ${{ secrets.RD_FTP }}
          ssh-keyscan -H -t rsa ${{ secrets.RD_FTP }} >> ~/.ssh/known_hosts
      #
      # Download the distribution artifact
      #
      - name: Download version artifact
        uses: actions/download-artifact@v2
        id: download

      - name: Get artifact details
        id: details
        run: |
          ls
          echo "::set-output name=build::"$(echo ls *.tar.gz | awk '{ print $2 }')
          echo "::set-output name=version::"$(ls *.tar.gz | awk '{ print $2 }' | grep -oP '(?<=website-).*(?=-distribution.tar.gz)')
        working-directory: ${{steps.download.outputs.download-path}}

      #
      # Upload the distribution to RD
      #
      - name: Upload distribution
        run: |
          ls
          echo put ${{ env.BUILD }} /uploads/dists/${{ env.VERSION }}.tar.gz | sftp nhs@static.hosting.onehippo.com
        env:
          BUILD: ${{steps.details.output.build}}
          VERSION: ${{steps.details.output.version}}
        working-directory: ${{steps.download.outputs.download-path}}